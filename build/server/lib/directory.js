// Generated by CoffeeScript 1.10.0
var config, fs, path, rmdir, spawn;

path = require('path');

fs = require('fs');

rmdir = require('rimraf');

spawn = require('child_process').spawn;

config = require('./conf').get;

({
  validName: function(name) {
    return name[0] !== '.' && name.indexOf('/') === -1;
  }

  /*
      Change owner for folder path
   */
});

module.exports.changeOwner = function(user, path, callback) {
  var child;
  child = spawn('chown', ['-R', user + ":" + user, path]);
  return child.on('exit', function(code) {
    if (code !== 0) {
      return callback(new Error('Unable to change permissions'));
    } else {
      return callback();
    }
  });
};


/*
    Create directory for <app>
 */

module.exports.create = function(app, callback) {
  var dirPath, error, error1;
  if (!validName(app.name)) {
    callback(new Error('Invalid name'));
    return;
  }
  dirPath = path.join(config('dir_app_data'), app.name);
  if (fs.existsSync(dirPath)) {
    return module.exports.changeOwner(app.user, dirPath, function(err) {
      return callback(err);
    });
  } else {
    try {
      return fs.mkdir(dirPath, "0700", function(err) {
        if (err) {
          return callback(err);
        } else {
          return module.exports.changeOwner(app.user, dirPath, function(err) {
            return callback(err);
          });
        }
      });
    } catch (error1) {
      error = error1;
      return callback(error);
    }
  }
};


/*
    Remove directory for <app>
 */

module.exports.remove = function(app, callback) {
  var dirPath;
  if (!validName(app.name)) {
    callback(new Error('Invalid name'));
    return;
  }
  dirPath = path.join(config('dir_app_data'), app.name);
  if (fs.existsSync(dirPath)) {
    return rmdir(dirPath, callback);
  } else {
    return callback();
  }
};
