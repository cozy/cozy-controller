// Generated by CoffeeScript 1.10.0
var Client, addDatabase, addInDatabase, config, controllerAdded, fs, log, path, permission, urlHelper;

fs = require('fs');

path = require('path');

Client = require('request-json-light').JsonClient;

urlHelper = require('cozy-url-sdk');

log = require('printit')({
  date: true,
  prefix: 'lib:stack'
});

config = require('./conf').get;

permission = require('../middlewares/token');

controllerAdded = false;


/*
    addDatabse:
        * test: number of tests (if app is data-system)
        * app: app to add to database
    Add <app> in database. Try <test> time if app is data-system
    (data-system should be started to add it in database)
 */

addDatabase = function(attempt, app) {
  if (attempt > 0) {
    return addInDatabase(app, function(err) {
      if (app.name === 'data-system' && (err != null)) {
        return setTimeout(function() {
          return addDatabase(attempt - 1, app);
        }, 1000);
      }
    });
  }
};


/*
    addInDatase:
        * app: application to add to database
    Add <app> in database:
        * Check if application isn't alread store in database
        * If it the case, update it (keep lastVersion added by home)
        * If not, add new document for this application
 */

addInDatabase = function(app, callback) {
  var clientDS;
  clientDS = new Client(urlHelper.dataSystem.url());
  clientDS.setBasicAuth('home', permission.get());
  return clientDS.post('/request/stackapplication/all/', {}, function(err, res, body) {
    var appli, application, i, len, requestPath;
    application = null;
    if (err == null) {
      for (i = 0, len = body.length; i < len; i++) {
        appli = body[i];
        appli = appli.value;
        if (appli.name === app.name) {
          if (application != null) {
            requestPath = "data/" + appli._id + "/";
            clientDS.del("data/" + appli._id + "/", function(err, res, body) {
              if (err != null) {
                return log.warn(err);
              }
            });
          } else {
            application = appli;
          }
        }
      }
    }
    if (application !== null) {
      if (application.version === app.version && (application.git != null)) {
        return callback();
      } else {
        app.lastVersion = application.lastVersion;
        requestPath = "data/" + application._id + "/";
        return clientDS.put(requestPath, app, function(err, res, body) {
          if (err == null) {
            if (app.name === 'controller') {
              controllerAdded = true;
            }
          }
          return callback(err);
        });
      }
    } else {
      return clientDS.post('/data/', app, function(err, res, body) {
        if ((err == null) && ((body != null ? body.error : void 0) != null)) {
          err = body.error;
        }
        if (err == null) {
          if (app.name === 'controller') {
            controllerAdded = true;
          }
        }
        return callback(err);
      });
    }
  });
};


/*
    Add application <app> in stack.json
        * read stack file
        * parse date (in json)
        * add application <app>
        * write stack file with new stack applications
 */

module.exports.addApp = function(app, callback) {
  var baseDir, manifestPath;
  fs.readFile(config('file_stack'), 'utf8', function(err, data) {
    var error, error1;
    try {
      data = JSON.parse(data);
    } catch (error1) {
      error = error1;
      data = {};
    }
    data[app.name] = app;
    data = JSON.stringify(data, null, 2);
    return fs.writeFile(config('file_stack'), data, callback);
  });
  baseDir = path.join(config('dir_app_bin'), app.name);
  manifestPath = path.join(baseDir, 'node_modules', "cozy-" + app.name, 'package.json');
  if (!fs.existsSync(manifestPath)) {
    manifestPath = path.join(baseDir, 'package.json');
  }
  return fs.readFile(manifestPath, function(err, data) {
    var appli, controller, controllerPath, ref;
    if (err) {
      return log.warn('Error when read package.json');
    } else {
      data = JSON.parse(data);
      appli = {
        name: app.name,
        version: data.version,
        git: (ref = app.repository) != null ? ref.url : void 0,
        "package": app["package"],
        docType: "StackApplication"
      };
      addDatabase(5, appli);
      if (!controllerAdded) {
        controllerPath = path.join(__dirname, '..', '..', '..', 'package.json');
        if (fs.existsSync(controllerPath)) {
          data = require(controllerPath);
          controller = {
            docType: "StackApplication",
            name: "controller",
            version: data.version,
            git: "https://github.com/cozy/cozy-controller.git"
          };
          return addInDatabase(controller, function(err) {
            if (err != null) {
              return log.warn(err);
            }
          });
        }
      }
    }
  });
};


/*
    Remove application <name> from stack.json
        * read stack file
        * parse date (in json)
        * remove application <name>
        * write stack file with new stack applications
 */

module.exports.removeApp = function(name, callback) {
  return fs.readFile(config('file_stack'), 'utf8', function(err, data) {
    var error, error1;
    try {
      data = JSON.parse(data);
    } catch (error1) {
      error = error1;
      data = {};
    }
    delete data[name];
    data = JSON.stringify(data, null, 2);
    return fs.writeFile(config('file_stack'), data, callback);
  });
};
