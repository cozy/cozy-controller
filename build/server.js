// Generated by CoffeeScript 1.10.0
var americano, application, autostart, controller, init, log, urlHelper;

americano = require('americano');

init = require('./server/initialize');

autostart = require('./server/lib/autostart');

controller = require('./server/lib/controller');

urlHelper = require('cozy-url-sdk');

log = require('printit')({
  date: true,
  prefix: "server"
});

application = module.exports = function(callback) {
  var base, currentUser, displayError, err, exitProcess, options, ref, stopProcess;
  if ((typeof process !== "undefined" && process !== null) && process.getuid() !== 0) {
    if (((ref = process.env) != null ? ref.USER : void 0) != null) {
      currentUser = ", current user is " + process.env.USER;
    } else {
      currentUser = "";
    }
    err = "cozy-controller should be run as root" + currentUser;
    log.error(err);
    return typeof callback === "function" ? callback(err) : void 0;
  } else {
    options = {
      name: 'controller',
      port: process.env.PORT || urlHelper.controller.port(),
      host: process.env.HOST || urlHelper.controller.host(),
      root: __dirname
    };
    if ((base = process.env).NODE_ENV == null) {
      base.NODE_ENV = "development";
    }
    init.init(function(err) {
      if (err != null) {
        log.error("Error during configuration initialization: ");
        log.raw(err);
        if (typeof callback === "function") {
          callback(err);
        }
      }
      return autostart.start(function(err) {
        if (err == null) {
          log.info("### Start Cozy Controller ###");
          return americano.start(options, function(err, app, server) {
            if (err) {
              log.error(err);
            }
            server.timeout = 10 * 60 * 1000;
            server.once('close', function(code) {
              log.info("Server close with code " + code + ".");
              return controller.stopAll(function() {
                process.removeListener('uncaughtException', displayError);
                process.removeListener('exit', exitProcess);
                process.removeListener('SIGTERM', stopProcess);
                return log.info("All applications are stopped");
              });
            });
            return typeof callback === "function" ? callback(err, app, server) : void 0;
          });
        } else {
          log.error("Error during autostart: ");
          log.raw(err);
          return typeof callback === "function" ? callback(err) : void 0;
        }
      });
    });
    displayError = function(err) {
      log.warn("WARNING: ");
      log.raw(err);
      return log.raw(err.stack);
    };
    exitProcess = function(code) {
      log.info("Process exit with code " + code);
      return controller.stopAll(function() {
        process.removeListener('uncaughtException', displayError);
        process.removeListener('SIGTERM', stopProcess);
        return process.exit(code);
      });
    };
    stopProcess = function() {
      log.info("Process is stopped");
      return controller.stopAll(function() {
        return process.exit();
      });
    };
    process.on('uncaughtException', displayError);
    process.once('exit', exitProcess);
    return process.once('SIGTERM', stopProcess);
  }
};

if (!module.parent) {
  application();
}
